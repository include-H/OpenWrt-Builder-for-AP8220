name: OpenWrt Builder

on:
  workflow_dispatch:
  push:
  schedule:
  - cron: "* * * 7 *"

env:
  REMOTE_REPOSITORY: gtolog/openwrt-ipq
  REMOTE_BRANCH: 24.10-nss-ap8220
  CONFIG_FILE: build.config
  CUSTOM_FILES_PATH: files/
  RELEASE_PREFIX: openwrt-qualcommax-ipq807x
  TZ: Asia/Shanghai

jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-24.04
    outputs:
      new_commits: ${{ steps.check_new_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_new_commits.outputs.latest_commit_sha }}
      nss_packages_repo_new_commits: ${{ steps.check_nss_packages_repo_new_commits.outputs.new_commits }}
      nss_packages_repo_latest_commit_sha: ${{ steps.check_nss_packages_repo_new_commits.outputs.latest_commit_sha }}
    steps:
      - name: Check for new commits
        id: check_new_commits
        run: |
          latest_commit_sha=$(curl -sL "https://api.github.com/repos/${{ env.REMOTE_REPOSITORY }}/commits?sha=${{ env.REMOTE_BRANCH }}&per_page=1" | jq -r '.[0].sha')
          last_built_commit_sha=$(curl -sL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.body' | grep -oP 'Build Commit: \K\w+' || echo '')
          echo "new_commits=$([[ "$latest_commit_sha" != "$last_built_commit_sha" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$latest_commit_sha" >> $GITHUB_OUTPUT
          
  build:
    name: Build OpenWrt
    needs: check_commits
    if: needs.check_commits.outputs.new_commits == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-24.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo apt full-upgrade -y
      
      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}
      
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "custom_repo"
      
      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Modify system defaults (IP, timezone, NTP servers)
        run: |
          # 修改默认 IP 地址
          sed -i 's/192.168.1.1/192.168.20.1/g' package/base-files/files/bin/config_generate
          # 修改时区为 CST-8
          sed -i 's/UTC/CST-8/g' package/base-files/files/bin/config_generate
          # 设置启用 NTP 服务
          sed -i "/set system.ntp.enable_server=/c\set system.ntp.enable_server='1'" package/base-files/files/bin/config_generate
          # 删除原有的 NTP 服务器配置
          sed -i "/add_list system.ntp.server='/d" package/base-files/files/bin/config_generate
          # 替换默认 NTP 服务器
          sed -i 's/0.openwrt.pool.ntp.org/cn.ntp.org.cn/g' package/base-files/files/bin/config_generate
          sed -i 's/1.openwrt.pool.ntp.org/ntp1.nim.ac.cn/g' package/base-files/files/bin/config_generate
          sed -i 's/2.openwrt.pool.ntp.org/cn.pool.ntp.org/g' package/base-files/files/bin/config_generate
          sed -i 's/3.openwrt.pool.ntp.org/ntp.aliyun.com/g' package/base-files/files/bin/config_generate
      
      - name: Add custom software packages
        run: |
          git clone --depth=1 https://github.com/jerrykuku/luci-theme-argon package/luci-theme-argon
          git clone --depth=1 https://github.com/jerrykuku/luci-app-argon-config package/luci-app-argon-config
      - name: Clone kwrt-packages repository
        run: |
          git clone --depth=1 https://github.com/kiddin9/kwrt-packages.git /tmp/kwrt-packages

      - name: Move custom packages to OpenWrt package directory
        run: |
          mv /tmp/kwrt-packages/luci-app-vlmcsd package/
          mv /tmp/kwrt-packages/vlmcsd package/
      
      
      - name: Configure firmware image
        run: |
          mv custom_repo/${{ env.CONFIG_FILE }} .config
          make defconfig -j$(nproc)
      
      - name: Include some custom configuration files,
        run: |
          mkdir -p ${{ env.CUSTOM_FILES_PATH }}
          mv custom_repo/${{ env.CUSTOM_FILES_PATH }}* ./files/
      
      - name: Download package sources
        run: |
          make download V=s

      - name: Build tools
        run: |
          make tools/install -j$(nproc) V=s || \
          make tools/install V=s

      - name: Build toolchain
        run: |
          make toolchain/install -j$(nproc) V=s || \
          make toolchain/install V=s

      - name: Build target images
        run: |
          make -j$(nproc) V=s || \
          make V=s
      
      - name: Package output
        run: tar -cvf ipq807x-images.tar bin/targets/qualcommax/ipq807x
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipq807x-images
          path: ipq807x-images.tar

  release:
    name: Create release
    needs: [build, check_commits]
    if: needs.build.result == 'success'
    runs-on: ubuntu-24.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ipq807x-images
      
      - name: Extract artifacts
        run: tar xf ipq807x-images.tar
      
      - name: Get current date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV
      
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: bin/targets/qualcommax/ipq807x/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: Updated prebuilt images ${{ env.RELEASE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Updated prebuilt images for ${{ env.RELEASE_DATE }}
            Build Commit: ${{ needs.check_commits.outputs.latest_commit_sha }}
      
      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 2
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
